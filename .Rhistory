amp.matrix[amp.matrix == 2] <- "A"
amp.matrix <- amp.matrix %>% as_tibble(rownames = NA) %>%
rownames_to_column("just.genes") %>% mutate_all(as.character) %>%
inner_join(amp.events) %>% select(just.genes, tags, coseg.names, everything())
#dels
del.events <- all.final.mat.event.types.df %>% filter(dels == "D") %>%
select(coseg.names, tags, just.genes)
# remove duplicates of both D and D+M
if(length(unique(del.events$just.genes)) != length(del.events$just.genes)) {
dups <- del.events %>% group_by(just.genes) %>% filter(n() > 1)
to.keep <- dups %>% filter(tags == "D+M")
del.events <- del.events %>% filter(!just.genes %in% dups$just.genes) %>%
bind_rows(to.keep)
}
del.matrix <- del.mat[unique(del.events$just.genes), intersecting.samples , drop = F]
# only get focal
del.matrix[del.matrix > -2] <- NA
del.matrix[del.matrix == -2] <- "D"
del.matrix <- del.matrix %>% as_tibble(rownames = NA) %>%
rownames_to_column("just.genes") %>% mutate_all(as.character) %>%
inner_join(del.events) %>% select(just.genes, tags, coseg.names, everything())
# fusions (if they exist)
if(isFALSE(all(is.na(all.final.mat.event.types.df$fus)))) {
fus.events <- all.final.mat.event.types.df %>% filter(fus == "F") %>%
select(coseg.names, tags, just.genes)
fus.mat <- read.table(paste0(fusion.data.dir, tumAcro, '.txt'), sep='\t', header=T, row.names=1, check.names=F)
fus.matrix <- fus.mat[unique(fus.events$just.genes), intersect(colnames(fus.mat), intersecting.samples), drop = F]
fus.matrix[fus.matrix == 1] <- "F"
fus.matrix[fus.matrix == 0] <- NA
fus.matrix <- fus.matrix %>% as_tibble(rownames = NA) %>%
rownames_to_column("just.genes") %>% mutate_all(as.character) %>%
inner_join(fus.events) %>% select(just.genes, tags, coseg.names, everything())
} else {
fus.matrix <- NULL
}
## bind them all together
tumor.events.mat <- bind_rows(mut.matrix, amp.matrix, del.matrix, fus.matrix)
# combine rows of duplicates so they represent only one event
dups <- tumor.events.mat %>% group_by(just.genes) %>% filter(n() > 1)
if(nrow(dups) > 0) {
# keep events that are just A vs D on separate lines
to.keep <- dups %>% filter(tags %in% c("A", "D", "M"))
remaining <- dups %>% filter(tags %in% c("A+M", "D+M"))
for (gene in unique(remaining$just.genes)) {
sub <- remaining[remaining$just.genes == gene,]
# combine lines with same tags to merge M and A/D
for (tag in unique(sub$tags)){
to.merge <- sub %>% filter(tags == tag)
new.line <- apply(to.merge, 2, paste0, collapse = ";")
new.line[1:3] <- unlist(to.merge[1,1:3])
to.keep <- bind_rows(to.keep, new.line)
}
}
to.keep[to.keep == "NA;NA"] <- NA
tumor.events.mat <- tumor.events.mat %>% filter(!just.genes %in% dups$just.genes) %>%
bind_rows(to.keep)
}
trans.tumor.events.mat <- tumor.events.mat %>% column_to_rownames("coseg.names") %>%
select(-just.genes, -tags) %>% t() %>% as_tibble(rownames = NA) %>% rownames_to_column("sample")
# add clusters to trans.tumor.events.mat
sample.clustering <- pancan.clusters[[tumAcro]] %>% enframe("sample", "cluster") %>%
filter(sample %in% intersecting.samples)
trans.tumor.events.mat <- inner_join(sample.clustering, trans.tumor.events.mat) %>%
select(-sample)
# get rid of gbm subtype 2 here before continuing
if(tumAcro == "gbm"){
trans.tumor.events.mat <- filter(trans.tumor.events.mat, cluster != 2)
}
# check if any subtype had no events (was saved as a logical in the final events plots)
no.events <- which(sapply(final.plots[["matrices"]][[tumAcro]], is.logical))
if(length(no.events > 0)) {
trans.tumor.events.mat <- filter(trans.tumor.events.mat, !cluster %in% no.events)
}
get.percent <- function(x){
round(sum(!is.na(x))/length(x)*100)
}
# matrix with all the percentages for the events
summary.df <- trans.tumor.events.mat %>% group_by(cluster) %>% summarise_all(get.percent) %>%
column_to_rownames("cluster") %>% t()
to.plot.df <- summary.df %>% as_tibble(rownames = NA) %>%
rownames_to_column("event.names")
# matrix with just the percentages for the events that are plotted
# replace all the cells that are not MOMA events with 0s
for (clus in colnames(to.plot.df)[2:ncol(to.plot.df)]) {
events.this.clus <- all.final.mat.event.types[[as.numeric(clus)]]$coseg.names
#to.plot.df.test <- to.plot.df %>% mutate(test1 = if_else(event.names %in% events.this.clus, to.plot.df[,clus], 0))
to.replace <- to.plot.df %>% as_tibble(rownames = NA) %>%
select(event.names, all_of(clus)) %>% deframe()
to.replace <- if_else(names(to.replace) %in% events.this.clus, to.replace,
if_else(str_sub(names(to.replace), end = -3) %in% events.this.clus, to.replace, 0))
to.plot.df[,clus] <- to.replace
}
###
# do row-wise proportion test of percentages
###
# first get number of samples per cluster
cluster.sums <- trans.tumor.events.mat %>% group_by(cluster) %>% summarise(total = n())
# initialize final dataframe for events and p.values
event.prop.df <- tibble(event = colnames(trans.tumor.events.mat[2:ncol(trans.tumor.events.mat)]),
pval = 1)
# create a contingency table for each event given it's occurence/non-occurence in each cluster
# do a chisq test to determine if the proportions are or aren't the same
for(ge in colnames(trans.tumor.events.mat[2:ncol(trans.tumor.events.mat)])) {
get.non.na <- function(x) sum(!is.na(x))
sub.df <- trans.tumor.events.mat %>% select(cluster, all_of(ge)) %>%
group_by(cluster) %>% summarise_all(get.non.na) %>% right_join(cluster.sums) %>%
transmute(suc = get(ge), failures = total - get(ge)) %>% as.matrix()
res <- chisq.test(sub.df, simulate.p.value = TRUE)$p.value
event.prop.df[event.prop.df$event == ge, 2] <- res
}
# adjust pvals for multi hypothesis correction
event.prop.df$adj.pval <- event.prop.df$stars <- p.adjust(event.prop.df$pval, method = "BH")
#event.prop.df$stars[event.prop.df$stars > 0.05] <- ""
event.prop.df <- mutate(event.prop.df, stars = ifelse(event.prop.df$stars < 0.0001, "****",
ifelse(event.prop.df$stars < 0.001, "***",
ifelse(event.prop.df$stars < 0.01, "**",
ifelse(event.prop.df$stars < 0.05, "*", " ")))))
# make the plot
to.plot.df <- to.plot.df %>% column_to_rownames("event.names") %>% as.matrix()
col_fun = colorRamp2(c(0, 1, 100), c("grey", "palegreen", "darkgreen"))
if(nrow(to.plot.df) >= 60) {
label.size <- 5
} else if (nrow(to.plot.df) >= 50 ) {
label.size <- 6
} else if (nrow(to.plot.df) >= 40 ) {
label.size <- 7
} else if (nrow(to.plot.df) >= 30 ) {
label.size <- 8
} else {
label.size <- 9
}
# make row annotation with astericks for chi.sq test
ha <- rowAnnotation(signif = anno_text(event.prop.df$stars, gp = gpar(fontsize = label.size)))
# make rowlabels that say cluster
col.labels <- structure(paste0("Cluster ", colnames(to.plot.df)), names = colnames(to.plot.df))
# make the title and subtitle with p values
title <- paste0("<span style='font-size:18pt; color:black'>Events in ", toupper(tumAcro), "</span>",
"<br><span style='font-size:7pt; color:black'> p values: *** < 0.001   |   ** < 0.01   |   * < 0.05 </span>" )
ht <- Heatmap(to.plot.df, col = col_fun, rect_gp = gpar(col = "white", lwd = 1),
column_names_rot = 45, column_labels = col.labels,
cell_fun = function(j, i, x, y, width, height, fill) {
if(to.plot.df[i, j] > 0) {
grid.text(sprintf("%.0f", to.plot.df[i, j]), x, y, gp = gpar(fontsize = label.size))
} else {
grid.text(sprintf("%.0f", summary.df[i, j]), x, y, gp = gpar(fontsize = label.size))
}
},
heatmap_legend_param = list(title = "% Samples \nin Cluster"),
row_names_gp = gpar(fontsize = label.size),
column_title = gt_render(title),
show_row_dend = F, show_column_dend = F,
right_annotation = ha)
p <- grid::grid.grabExpr(draw(ht, padding = unit(c(2, 10, 2, .5), "mm")))
cosegregation.plots[[tumAcro]] <- p
}
m1 <- marrangeGrob(cosegregation.plots, ncol = 1, nrow = 1)
ggsave(filename = paste0(output.folder, "cosegregation.plots.focal.only.pdf"), m1,
width = 8.5, height = 11, units = c("in"),
dpi = 300)
ggsave(filename = "~/Desktop/cosegregation.plots.focal.only.pdf", m1,
width = 8.5, height = 11, units = c("in"),
dpi = 300)
View(cosegregation.plots)
cosegregation.plots <- list()
for (tumAcro in tumor.types) {
print(paste("Making plots for:", tumAcro))
# First clean up current event names for each subtype
# Make table with event names and type
all.final.mat.event.types <- list()
for (clus in seq_along(final.plots[["matrices"]][[tumAcro]])) {
final.mat <- final.plots[["matrices"]][[tumAcro]][[clus]]
if (is.null(final.mat)) {
all.final.mat.event.types[[clus]] <- NULL
next
}
final.plot.names <- str_split_fixed(rownames(final.mat), pattern = "::", n = 2)
# already added this to the original plot script
# if(length(unique(final.plot.names[,1])) == nrow(final.mat)) {
#     rownames(final.mat) <- final.plot.names[,1]
# } else {
#     # replace duplicate names with gene::type, otherwise just the name
#     dups <- final.plot.names[duplicated(final.plot.names[,1]),1]
#     new.names <- c()
#
#     for (idx in seq_along(final.plot.names[,1])) {
#         ge <- final.plot.names[idx,1]
#         if (ge %in% dups) {
#             new.names <- c(new.names, rownames(final.mat)[idx])
#         } else {
#             new.names <- c(new.names, ge)
#         }
#     }
#     rownames(final.mat) <- new.names
# }
#
# resave new final mat to object for plotting heatmaps later
# final.plots[["matrices"]][[tumAcro]][[clus]] <- final.mat
# scrape final events matrix for types to create tags
final.mat.event.types <- apply(final.mat, 1, function(x){paste0(unique(x, na.rm = T), collapse = "_")}) %>%
enframe()
final.mat.event.types <- final.mat.event.types %>%
mutate(dels = if_else(str_detect(final.mat.event.types$value, "highdel"), "D", NA_character_)) %>%
mutate(amps = if_else(str_detect(final.mat.event.types$value, "highamp"), "A", NA_character_)) %>%
mutate(muts = if_else(str_detect(final.mat.event.types$value, "mut"), "M", NA_character_)) %>%
mutate(fus = if_else(str_detect(final.mat.event.types$value, "fus"), "F", NA_character_))
tags <- final.mat.event.types %>%
column_to_rownames("name") %>% select(-value) %>%
as.matrix() %>%
apply(X = ., MARGIN = 1, FUN = function(x){paste0(na.omit(x), collapse = "+")})
# make sure these names don't have the :: so they can be unified later
cosegregation.names <- paste(final.plot.names[,1], tags, sep = " - ")
final.mat.event.types$coseg.names <- cosegregation.names
final.mat.event.types$tags <- tags
final.mat.event.types$just.genes <- final.plot.names[,1]
# replace any "multi" regions with the gene names
multi.indices <- which(grepl("multi",final.mat.event.types$coseg.names))
if(length(multi.indices) > 0){
for (idx in multi.indices) {
type <- if_else(grepl("D", final.mat.event.types$coseg.names[idx]), "del", "amp")
region.name <- str_sub(final.plot.names[idx,1], end = -7)
cluster <- paste0("cluster", clus)
region.genes <- pluck(multi.gene.list, tumAcro, cluster, type, region.name)
final.mat.event.types$just.genes[idx] <- region.genes[1]
}
}
all.final.mat.event.types[[clus]] <- final.mat.event.types
}
all.final.mat.event.types.df <- all.final.mat.event.types  %>% discard(is.null) %>%  map(select, -value, -name) %>%
reduce(full_join) %>% mutate(just.genes = str_split_fixed(just.genes, ";", n = 2)[,1])
#### get rid of duplicates from having A/D + M and just M alone
# dups <- all.final.mat.event.types.df %>% group_by(just.genes) %>% filter(n() > 1)
# all.final.mat.event.types.remove.dups <- filter(all.final.mat.event.types.df, !just.genes %in% dups$just.genes)
#
# for (event in unique(dups$just.genes)) {
#     sub.df <- dups %>% filter(just.genes == event)
#     name.split <- str_split_fixed(sub.df$coseg.names, " - ", 2)[,2]
#
#     ## combine based on all different combos of duplicates
#     if(all(c("A+M", "D+M") %in% name.split) & nrow(sub.df) == 2) {
#         # just has two tags A+M and D+M
#         # don't merge!
#         all.final.mat.event.types.remove.dups <- bind_rows(all.final.mat.event.types.remove.dups, sub.df)
#     } else if (all(c("A+M", "D+M") %in% name.split) & nrow(sub.df) > 2) {
#         # has A+M, D+M and A/D/M alone
#         # only keep the A+M and D+M
#
#     }
# }
### load required event matrices
### Collect percentages for occurence per subtype
# load all in first to get intersecting samples
mut.mat <- get(load(paste0(snp.dir,"hugo-ids/", tumAcro, "-rawsnp.HUGO.rda")))
# cnvs, have to amps and dels separately
# thresh.by.gene <- read.table(paste0(gistic.dir, tumAcro, '/all_thresholded.by_genes.txt'), header=T, sep='\t', row.names=1, check.names=F)
thresh.by.gene <- vroom(paste0(gistic.dir, tumAcro, '/all_thresholded.by_genes.txt')) %>% column_to_rownames("Gene Symbol")
# first two columns are metadata and sample names are in long format
short.sample.ids <- sapply(colnames(thresh.by.gene)[3:ncol(thresh.by.gene)], function(x) substr(x,1,15), USE.NAMES = F)
colnames(thresh.by.gene) <- c(colnames(thresh.by.gene)[1:2], short.sample.ids)
cnv <- thresh.by.gene
amp.mat <- del.mat <- cnv <- cnv[,3:ncol(cnv)]
# get sample intersection
intersecting.samples <- intersect(colnames(mut.mat), colnames(cnv)) %>%
intersect(viper.names)
# mutations
mut.events <- all.final.mat.event.types.df %>% filter(muts == "M") %>%
select(coseg.names, tags, just.genes)
mut.matrix <- mut.mat[unique(mut.events$just.genes), intersecting.samples, drop = F]
mut.matrix[mut.matrix == 1] <- "M"
mut.matrix[mut.matrix == 0] <- NA
mut.matrix <- mut.matrix %>% as_tibble(rownames = NA) %>%
rownames_to_column("just.genes") %>% mutate_all(as.character) %>%
inner_join(mut.events) %>% select(just.genes, tags, coseg.names, everything())
#amps
amp.events <- all.final.mat.event.types.df %>% filter(amps == "A") %>%
select(coseg.names, tags, just.genes)
# remove duplicates of both A and A+M
if(length(unique(amp.events$just.genes)) != length(amp.events$just.genes)) {
dups <- amp.events %>% group_by(just.genes) %>% filter(n() > 1)
to.keep <- dups %>% filter(tags == "A+M")
amp.events <- amp.events %>% filter(!just.genes %in% dups$just.genes) %>%
bind_rows(to.keep)
}
amp.matrix <- amp.mat[unique(amp.events$just.genes), intersecting.samples, drop = F]
# only get focal
amp.matrix[amp.matrix < 2] <- NA
amp.matrix[amp.matrix == 2] <- "A"
amp.matrix <- amp.matrix %>% as_tibble(rownames = NA) %>%
rownames_to_column("just.genes") %>% mutate_all(as.character) %>%
inner_join(amp.events) %>% select(just.genes, tags, coseg.names, everything())
#dels
del.events <- all.final.mat.event.types.df %>% filter(dels == "D") %>%
select(coseg.names, tags, just.genes)
# remove duplicates of both D and D+M
if(length(unique(del.events$just.genes)) != length(del.events$just.genes)) {
dups <- del.events %>% group_by(just.genes) %>% filter(n() > 1)
to.keep <- dups %>% filter(tags == "D+M")
del.events <- del.events %>% filter(!just.genes %in% dups$just.genes) %>%
bind_rows(to.keep)
}
del.matrix <- del.mat[unique(del.events$just.genes), intersecting.samples , drop = F]
# only get focal
del.matrix[del.matrix > -2] <- NA
del.matrix[del.matrix == -2] <- "D"
del.matrix <- del.matrix %>% as_tibble(rownames = NA) %>%
rownames_to_column("just.genes") %>% mutate_all(as.character) %>%
inner_join(del.events) %>% select(just.genes, tags, coseg.names, everything())
# fusions (if they exist)
if(isFALSE(all(is.na(all.final.mat.event.types.df$fus)))) {
fus.events <- all.final.mat.event.types.df %>% filter(fus == "F") %>%
select(coseg.names, tags, just.genes)
fus.mat <- read.table(paste0(fusion.data.dir, tumAcro, '.txt'), sep='\t', header=T, row.names=1, check.names=F)
fus.matrix <- fus.mat[unique(fus.events$just.genes), intersect(colnames(fus.mat), intersecting.samples), drop = F]
fus.matrix[fus.matrix == 1] <- "F"
fus.matrix[fus.matrix == 0] <- NA
fus.matrix <- fus.matrix %>% as_tibble(rownames = NA) %>%
rownames_to_column("just.genes") %>% mutate_all(as.character) %>%
inner_join(fus.events) %>% select(just.genes, tags, coseg.names, everything())
} else {
fus.matrix <- NULL
}
## bind them all together
tumor.events.mat <- bind_rows(mut.matrix, amp.matrix, del.matrix, fus.matrix)
# combine rows of duplicates so they represent only one event
dups <- tumor.events.mat %>% group_by(just.genes) %>% filter(n() > 1)
if(nrow(dups) > 0) {
# keep events that are just A vs D on separate lines
to.keep <- dups %>% filter(tags %in% c("A", "D", "M"))
remaining <- dups %>% filter(tags %in% c("A+M", "D+M"))
for (gene in unique(remaining$just.genes)) {
sub <- remaining[remaining$just.genes == gene,]
# combine lines with same tags to merge M and A/D
for (tag in unique(sub$tags)){
to.merge <- sub %>% filter(tags == tag)
new.line <- apply(to.merge, 2, paste0, collapse = ";")
new.line[1:3] <- unlist(to.merge[1,1:3])
to.keep <- bind_rows(to.keep, new.line)
}
}
to.keep[to.keep == "NA;NA"] <- NA
tumor.events.mat <- tumor.events.mat %>% filter(!just.genes %in% dups$just.genes) %>%
bind_rows(to.keep)
}
trans.tumor.events.mat <- tumor.events.mat %>% column_to_rownames("coseg.names") %>%
select(-just.genes, -tags) %>% t() %>% as_tibble(rownames = NA) %>% rownames_to_column("sample")
# add clusters to trans.tumor.events.mat
sample.clustering <- pancan.clusters[[tumAcro]] %>% enframe("sample", "cluster") %>%
filter(sample %in% intersecting.samples)
trans.tumor.events.mat <- inner_join(sample.clustering, trans.tumor.events.mat) %>%
select(-sample)
# get rid of gbm subtype 2 here before continuing
if(tumAcro == "gbm"){
trans.tumor.events.mat <- filter(trans.tumor.events.mat, cluster != 2)
}
# check if any subtype had no events (was saved as a logical in the final events plots)
no.events <- which(sapply(final.plots[["matrices"]][[tumAcro]], is.logical))
if(length(no.events > 0)) {
trans.tumor.events.mat <- filter(trans.tumor.events.mat, !cluster %in% no.events)
}
get.percent <- function(x){
round(sum(!is.na(x))/length(x)*100)
}
# matrix with all the percentages for the events
summary.df <- trans.tumor.events.mat %>% group_by(cluster) %>% summarise_all(get.percent) %>%
column_to_rownames("cluster") %>% t()
to.plot.df <- summary.df %>% as_tibble(rownames = NA) %>%
rownames_to_column("event.names")
# matrix with just the percentages for the events that are plotted
# replace all the cells that are not MOMA events with 0s
for (clus in colnames(to.plot.df)[2:ncol(to.plot.df)]) {
events.this.clus <- all.final.mat.event.types[[as.numeric(clus)]]$coseg.names
#to.plot.df.test <- to.plot.df %>% mutate(test1 = if_else(event.names %in% events.this.clus, to.plot.df[,clus], 0))
to.replace <- to.plot.df %>% as_tibble(rownames = NA) %>%
select(event.names, all_of(clus)) %>% deframe()
to.replace <- if_else(names(to.replace) %in% events.this.clus, to.replace,
if_else(str_sub(names(to.replace), end = -3) %in% events.this.clus, to.replace, 0))
to.plot.df[,clus] <- to.replace
}
###
# do row-wise proportion test of percentages
###
# first get number of samples per cluster
cluster.sums <- trans.tumor.events.mat %>% group_by(cluster) %>% summarise(total = n())
# initialize final dataframe for events and p.values
event.prop.df <- tibble(event = colnames(trans.tumor.events.mat[2:ncol(trans.tumor.events.mat)]),
pval = 1)
# create a contingency table for each event given it's occurence/non-occurence in each cluster
# do a chisq test to determine if the proportions are or aren't the same
for(ge in colnames(trans.tumor.events.mat[2:ncol(trans.tumor.events.mat)])) {
get.non.na <- function(x) sum(!is.na(x))
sub.df <- trans.tumor.events.mat %>% select(cluster, all_of(ge)) %>%
group_by(cluster) %>% summarise_all(get.non.na) %>% right_join(cluster.sums) %>%
transmute(suc = get(ge), failures = total - get(ge)) %>% as.matrix()
res <- chisq.test(sub.df, simulate.p.value = TRUE)$p.value
event.prop.df[event.prop.df$event == ge, 2] <- res
}
# adjust pvals for multi hypothesis correction
event.prop.df$adj.pval <- event.prop.df$stars <- p.adjust(event.prop.df$pval, method = "BH")
#event.prop.df$stars[event.prop.df$stars > 0.05] <- ""
event.prop.df <- mutate(event.prop.df, stars = ifelse(event.prop.df$stars < 0.0001, "****",
ifelse(event.prop.df$stars < 0.001, "***",
ifelse(event.prop.df$stars < 0.01, "**",
ifelse(event.prop.df$stars < 0.05, "*", " ")))))
# make the plot
to.plot.df <- to.plot.df %>% column_to_rownames("event.names") %>% as.matrix()
col_fun = colorRamp2(c(0, 1, 100), c("grey", "palegreen", "darkgreen"))
if(nrow(to.plot.df) >= 60) {
label.size <- 5
} else if (nrow(to.plot.df) >= 50 ) {
label.size <- 6
} else if (nrow(to.plot.df) >= 40 ) {
label.size <- 7
} else if (nrow(to.plot.df) >= 30 ) {
label.size <- 8
} else {
label.size <- 9
}
# make row annotation with astericks for chi.sq test
ha <- rowAnnotation(signif = anno_text(event.prop.df$stars, gp = gpar(fontsize = label.size)))
# make rowlabels that say cluster
col.labels <- structure(paste0("Cluster ", colnames(to.plot.df)), names = colnames(to.plot.df))
# make the title and subtitle with p values
title <- paste0("<span style='font-size:18pt; color:black'>Events in ", toupper(tumAcro), "</span>",
"<br><span style='font-size:7pt; color:black'> p values: *** < 0.001   |   ** < 0.01   |   * < 0.05 </span>" )
ht <- Heatmap(to.plot.df, col = col_fun, rect_gp = gpar(col = "white", lwd = 1),
column_names_rot = 45, column_labels = col.labels,
cell_fun = function(j, i, x, y, width, height, fill) {
if(to.plot.df[i, j] > 0) {
grid.text(sprintf("%.0f", to.plot.df[i, j]), x, y, gp = gpar(fontsize = label.size))
} else {
grid.text(sprintf("%.0f", summary.df[i, j]), x, y, gp = gpar(fontsize = label.size))
}
},
heatmap_legend_param = list(title = "% Samples \nin Cluster"),
row_names_gp = gpar(fontsize = label.size),
column_title = gt_render(title),
show_row_dend = T, show_column_dend = T,
right_annotation = ha)
p <- grid::grid.grabExpr(draw(ht, padding = unit(c(2, 10, 2, .5), "mm")))
cosegregation.plots[[tumAcro]] <- p
}
m1 <- marrangeGrob(cosegregation.plots, ncol = 1, nrow = 1)
ggsave(filename = paste0(output.folder, "cosegregation.plots.focal.only.pdf"), m1,
width = 8.5, height = 11, units = c("in"),
dpi = 300)
ggsave(filename = "~/Desktop/cosegregation.plots.focal.only.pdf", m1,
width = 8.5, height = 11, units = c("in"),
dpi = 300)
setwd("~/Documents/Github/OncoSig")
library(OncoSig)
df_1=read.delim("~/OncoSig/Input_data_files/Naive_Bayes_evidences_set_1.txt",header=TRUE)
library(randomForest)
Network_location="./Input_data_files/COAD/original_network.txt"
Network=read.delim(Network_location,header=F)
Network$V1=as.character(Network$V1)
Network$V2=as.character(Network$V2)
Network$V3=as.numeric(Network$V3)
Network=as.matrix(Network)
Network[,3]=as.numeric(Network[,3])
Network_matrix=listToMatrix(Network)
Gold_Standard_location= "./Input_data_files/LUAD/10_oncogene_pathways/KRAS/total.txt"
Gold_Standard=read.delim(Gold_Standard_location,header=F)
Gold_Standard$V1=as.character(Gold_Standard$V1)
remove(Network_matrix)
Query_output_results=OncoSigRF(Network_matrix_df, Gold_Standard_in_Network_names, Fraction_Gold_sample=0.5, ntrees=50, max_iterations=50, balance=1, to_save=1)
Query_output_results_scores=as.data.frame(Query_output_results[[1]])
Query_output_results=OncoSigRF(Network_matrix_df, Gold_Standard, Fraction_Gold_sample=0.5, ntrees=50, max_iterations=50, balance=1, to_save=1)
Query_output_results=OncoSigRF(Network_matrix, Gold_Standard, Fraction_Gold_sample=0.5, ntrees=50, max_iterations=50, balance=1, to_save=1)
Query_output_results=OncoSigRF(Network, Gold_Standard, Fraction_Gold_sample=0.5, ntrees=50, max_iterations=50, balance=1, to_save=1)
df_1=read.delim("~/OncoSig/Input_data_files/Naive_Bayes_evidences_set_1.txt",header=TRUE)
df_1=read.delim("./Input_data_files/Naive_Bayes_evidences_set_1.txt",header=TRUE)
df_1=read.delim("./Input_data_files/Naive_Bayes_evidences_set_1.txt",header=TRUE)
df_2=read.delim("~/OncoSig/Input_data_files/Naive_Bayes_evidences_set_2.txt",header=TRUE)
df_2=read.delim("./Input_data_files/Naive_Bayes_evidences_set_2.txt",header=TRUE)
the_bins=list(c(0,40,200,1200),c(0,.1),c(-2,-0.15,-0.02,0.0925),c(1,2,6),
c(0,0.25),c(1,3,20),c(1,4,20),c(1,4,20),c(0,0.0001,0.9999),
c(0,0.01,0.05))
predictions=OncoSigNB(training_set = df_1,testing_set = df_2,
the_bins=the_bins,correlated_features =list())
predictions[1:5]
Network_location="./Input_data_files/COAD/original_network.txt"
Network=read.delim(Network_location,header=F)
Network$V1=as.character(Network$V1)
Network$V2=as.character(Network$V2)
Network$V3=as.numeric(Network$V3)
Network=as.matrix(Network)
Network[,3]=as.numeric(Network[,3])
Network_matrix=listToMatrix(Network)
# part 2
Network_location="./Input_data_files/LUAD/original_network_sample.txt"
Network=read.delim(Network_location,header=F)
Network$V1=as.character(Network$V1)
Network$V2=as.character(Network$V2)
Network$V3=as.numeric(Network$V3)
Network=as.matrix(Network)
Network[,3]=as.numeric(Network[,3])
Network[1:5m]
Network[1:5,]
Network_matrix=listToMatrix(Network)
Gold_Standard_location= "./Input_data_files/LUAD/10_oncogene_pathways/KRAS/total.txt"
Gold_Standard=read.delim(Gold_Standard_location,header=F)
Gold_Standard$V1=as.character(Gold_Standard$V1)
Network_matrix_df=as.data.frame(Network_matrix)
Gold_Standard_in_Network_names=intersect(rownames(Network_matrix_df), Gold_Standard$V1)
Negative_Set_names=setdiff(rownames(Network_matrix_df), Gold_Standard_in_Network_names)
remove(Network_matrix)
Query_output_results=OncoSigRF(Network_matrix_df, Gold_Standard_in_Network_names, max_iterations=5)
Query_output_results_scores=as.data.frame(Query_output_results[[1]])
View(Query_output_results_scores)
KRAS_features= "./Input_data_files/LUAD/OncoSigUnsup/feature_list_KRAS.txt"
EGFR_forest= "./Input_data_files/LUAD/OncoSigUnsup/All_forests_EGFR.r"
results=OncoSigUnsup(KRAS_features,EGFR_forest)
View(results)
